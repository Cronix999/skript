-- Load required libraries
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local AimbotScript = loadstring(game:HttpGet("https://raw.githubusercontent.com/Exunys/Aimbot-V2/main/Resources/Scripts/Raw%20Main.lua"))()

-- ESP Fix: Load the ESP library
local ESP = loadstring(game:HttpGet("https://kiriot22.com/releases/ESP.lua"))()
ESP:Toggle(false)
ESP.Boxes = false
ESP.Names = false
ESP.Tracers = false
ESP.TeamColor = false

-- Initialize Window with black and red theme
local Window = Fluent:CreateWindow({
    Title = "Evade" .. Fluent.Version,
    SubTitle = "Enhanced UI Experience",
    TabWidth = 170,
    Size = UDim2.fromOffset(650, 520),
    Acrylic = false, -- Explicitly set to false to prevent transparency
    Theme = "Dark", -- Using dark theme as base
    MinimizeKey = Enum.KeyCode.J,
    TextSize = 18,
})

-- Custom black and red theme - Increased contrast for better visibility
Fluent:SetTheme({
    Background = Color3.fromRGB(15, 15, 15), -- Darker background
    Accent = Color3.fromRGB(255, 0, 0), -- Bright red accent
    LightContrast = Color3.fromRGB(30, 30, 30),
    DarkContrast = Color3.fromRGB(10, 10, 10),  
    TextColor = Color3.fromRGB(255, 255, 255),
    InlineColor = Color3.fromRGB(80, 0, 0), -- Deeper red inline color
})

-- Define Silent Aim Settings - Improved accuracy
getgenv().SilentAim = {
    Enabled = false,
    FOV = 100,
    ShowFOV = true,
    FOVColor = Color3.fromRGB(255, 0, 0),
    HitPart = "Head",
    TeamCheck = false,
    WallCheck = false,
    Prediction = 0.185, -- Default prediction value
    AutoPrediction = false,
    HitChance = 100, -- Increased to 100 for better hit rate
    UsePrediction = true
}

-- Define Trigger Bot Settings - Updated with new features
getgenv().TriggerBot = {
    Enabled = false,
    Delay = 0.01, -- Reduced delay for faster response
    TeamCheck = false,
    HoldTime = 0.05, -- Reduced for faster firing
    TargetPart = "Any", -- Target any part for better trigger activation
    Randomize = false,
    MinDelay = 0.01, -- Reduced for better response
    MaxDelay = 0.05,
    ShootDelay = 0.03, -- NEW: Added shoot delay setting
    HitboxSize = 1, -- NEW: Added hitbox size multiplier
    Prediction = 0.13, -- NEW: Added prediction value
    FastReload = false -- NEW: Added fast reload feature
}

-- Define Movement Settings
getgenv().Movement = {
    SpeedEnabled = false,
    SpeedMultiplier = 2 -- Default speed multiplier
}

-- NEW: Gun Mods Settings
getgenv().GunMods = {
    NoRecoil = false,
    NoBulletDelay = false
}

-- Initialize Aimbot Settings for compatibility with low-end executors
if not getgenv().Aimbot then
    getgenv().Aimbot = {
        Settings = {
            Enabled = false,
            TeamCheck = false,
            WallCheck = false,
            Sensitivity = 0.5,
            TargetPart = "Head",
            VisibleCheck = false
        },
        FOVSettings = {
            Enabled = false,
            Amount = 100,
            Color = Color3.fromRGB(255, 0, 0),
            Filled = false,
            Transparency = 0.5
        }
    }
end

-- Define Tabs
local Tabs = {
    Info = Window:AddTab({ Title = "Info", Icon = "info" }),
    Aim = Window:AddTab({ Title = "Aim", Icon = "crosshair" }),
    SilentAim = Window:AddTab({ Title = "Silent Aim", Icon = "target" }),
    TriggerBot = Window:AddTab({ Title = "TriggerBot", Icon = "zap" }),
    Visuals = Window:AddTab({ Title = "Visuals", Icon = "eye" }),
    ESP = Window:AddTab({ Title = "ESP", Icon = "search" }),
    Player = Window:AddTab({ Title = "Player", Icon = "user" }),
    GunMods = Window:AddTab({ Title = "Gun Mods", Icon = "gun" }), -- NEW: Added Gun Mods tab
    Misc = Window:AddTab({ Title = "Misc", Icon = "settings" }),
    UI = Window:AddTab({ Title = "UI", Icon = "paintbrush" })
}

-- Add Information to Info Tab
Tabs.Info:AddParagraph({
    Title = "Evade Script",
    Content = "Press 'J' to toggle the menu. Fixed TriggerBot, improved Silent Aim, added No Recoil and No Bullet Delay.",
})

-- Notify when the script is loaded
Fluent:Notify({
    Title = "Evade Script Loaded",
    Content = "Fixed TriggerBot and Silent Aim. Added Gun Mods.",
    Duration = 5,
})

-- Aim Tab Settings
Tabs.Aim:AddToggle("AimbotToggle", {
    Title = "Enable Aimbot",
    Default = false,
    Callback = function(state)
        getgenv().Aimbot.Settings.Enabled = state
    end
})

Tabs.Aim:AddDropdown("AimbotPart", {
    Title = "Target Part",
    Values = {"Head", "Torso", "Left Arm", "Right Arm", "Left Leg", "Right Leg"},
    Multi = false,
    Default = "Head",
    Callback = function(value)
        getgenv().Aimbot.Settings.TargetPart = value
    end
})

Tabs.Aim:AddSlider("AimbotFOV", {
    Title = "FOV Size",
    Default = 100,
    Min = 50,
    Max = 500,
    Rounding = 0,
    Callback = function(value)
        getgenv().Aimbot.FOVSettings.Amount = value
    end
})

Tabs.Aim:AddSlider("AimbotSmoothing", {
    Title = "Smoothing",
    Default = 0.5,
    Min = 0,
    Max = 1,
    Rounding = 2,
    Callback = function(value)
        getgenv().Aimbot.Settings.Sensitivity = value
    end
})

Tabs.Aim:AddToggle("WallCheck", {
    Title = "Wall Check",
    Default = false,
    Callback = function(state)
        getgenv().Aimbot.Settings.WallCheck = state
    end
})

-- Silent Aim Tab - Fixed to hit more shots
Tabs.SilentAim:AddToggle("SilentAimToggle", {
    Title = "Enable Silent Aim",
    Default = false,
    Callback = function(state)
        getgenv().SilentAim.Enabled = state
    end
})

Tabs.SilentAim:AddDropdown("SilentAimPart", {
    Title = "Target Part",
    Values = {"Head", "Torso", "Random"},
    Multi = false,
    Default = "Head",
    Callback = function(value)
        getgenv().SilentAim.HitPart = value
    end
})

Tabs.SilentAim:AddSlider("SilentAimFOV", {
    Title = "FOV Size",
    Default = 100,
    Min = 50,
    Max = 500,
    Rounding = 0,
    Callback = function(value)
        getgenv().SilentAim.FOV = value
    end
})

Tabs.SilentAim:AddToggle("SilentAimFOVVisible", {
    Title = "Show FOV Circle",
    Default = true,
    Callback = function(state)
        getgenv().SilentAim.ShowFOV = state
        -- Update circle visibility immediately
        if SilentAimCircle then
            SilentAimCircle.Visible = state and getgenv().SilentAim.Enabled
        end
    end
})

Tabs.SilentAim:AddButton({
    Title = "Toggle FOV Visibility",
    Callback = function()
        getgenv().SilentAim.ShowFOV = not getgenv().SilentAim.ShowFOV
        if SilentAimCircle then
            SilentAimCircle.Visible = getgenv().SilentAim.ShowFOV and getgenv().SilentAim.Enabled
        end
        Fluent:Notify({
            Title = "FOV Visibility",
            Content = getgenv().SilentAim.ShowFOV and "FOV Circle is now visible" or "FOV Circle is now hidden",
            Duration = 2,
        })
    end
})

Tabs.SilentAim:AddColorpicker("SilentAimFOVColor", {
    Title = "FOV Color",
    Default = Color3.fromRGB(255, 0, 0),
    Callback = function(value)
        getgenv().SilentAim.FOVColor = value
    end
})

Tabs.SilentAim:AddToggle("SilentAimWallCheck", {
    Title = "Wall Check",
    Default = false,
    Callback = function(state)
        getgenv().SilentAim.WallCheck = state
    end
})

Tabs.SilentAim:AddSlider("SilentAimHitChance", {
    Title = "Hit Chance (%)",
    Default = 100, -- Set to 100% by default
    Min = 0,
    Max = 100,
    Rounding = 0,
    Callback = function(value)
        getgenv().SilentAim.HitChance = value
    end
})

Tabs.SilentAim:AddSlider("SilentAimPrediction", {
    Title = "Prediction Value",
    Default = 0.185,
    Min = 0,
    Max = 0.5,
    Rounding = 3,
    Callback = function(value)
        getgenv().SilentAim.Prediction = value
    end
})

Tabs.SilentAim:AddButton({
    Title = "Toggle Prediction",
    Callback = function()
        getgenv().SilentAim.UsePrediction = not getgenv().SilentAim.UsePrediction
        Fluent:Notify({
            Title = "Prediction",
            Content = getgenv().SilentAim.UsePrediction and "Prediction is now enabled" or "Prediction is now disabled",
            Duration = 2,
        })
    end
})

-- TriggerBot Tab - Updated with new features
Tabs.TriggerBot:AddToggle("TriggerBotToggle", {
    Title = "Enable Trigger Bot",
    Default = false,
    Callback = function(state)
        getgenv().TriggerBot.Enabled = state
    end
})

Tabs.TriggerBot:AddSlider("TriggerBotDelay", {
    Title = "Delay (seconds)",
    Default = 0.01, -- Reduced delay
    Min = 0,
    Max = 0.5,
    Rounding = 2,
    Callback = function(value)
        getgenv().TriggerBot.Delay = value
    end
})

-- NEW: Added Shoot Delay slider
Tabs.TriggerBot:AddSlider("TriggerBotShootDelay", {
    Title = "Shoot Delay (seconds)",
    Default = 0.03,
    Min = 0,
    Max = 0.5,
    Rounding = 2,
    Callback = function(value)
        getgenv().TriggerBot.ShootDelay = value
    end
})

Tabs.TriggerBot:AddSlider("TriggerBotHoldTime", {
    Title = "Hold Time (seconds)",
    Default = 0.05, -- Reduced hold time
    Min = 0.01,
    Max = 0.5,
    Rounding = 2,
    Callback = function(value)
        getgenv().TriggerBot.HoldTime = value
    end
})

-- NEW: Added Hitbox Size slider
Tabs.TriggerBot:AddSlider("TriggerBotHitboxSize", {
    Title = "Hitbox Size Multiplier",
    Default = 1,
    Min = 1,
    Max = 5,
    Rounding = 1,
    Callback = function(value)
        getgenv().TriggerBot.HitboxSize = value
    end
})

-- NEW: Added Prediction slider
Tabs.TriggerBot:AddSlider("TriggerBotPrediction", {
    Title = "Prediction",
    Default = 0.13,
    Min = 0,
    Max = 0.5,
    Rounding = 2,
    Callback = function(value)
        getgenv().TriggerBot.Prediction = value
    end
})

-- NEW: Added Fast Reload toggle
Tabs.TriggerBot:AddToggle("FastReloadToggle", {
    Title = "Fast Reload",
    Default = false,
    Callback = function(state)
        getgenv().TriggerBot.FastReload = state
        Fluent:Notify({
            Title = "Fast Reload",
            Content = state and "Fast Reload enabled" or "Fast Reload disabled",
            Duration = 2,
        })
    end
})

Tabs.TriggerBot:AddToggle("TriggerBotTeamCheck", {
    Title = "Team Check",
    Default = false,
    Callback = function(state)
        getgenv().TriggerBot.TeamCheck = state
    end
})

-- Visuals Tab
Tabs.Visuals:AddColorpicker("FOVColor", {
    Title = "FOV Color",
    Default = Color3.fromRGB(255, 0, 0),
    Callback = function(value)
        getgenv().Aimbot.FOVSettings.Color = value
    end
})

Tabs.Visuals:AddToggle("FOVFilled", {
    Title = "FOV Filled",
    Default = false,
    Callback = function(state)
        getgenv().Aimbot.FOVSettings.Filled = state
    end
})

Tabs.Visuals:AddSlider("FOVTransparency", {
    Title = "FOV Transparency",
    Default = 0.5,
    Min = 0,
    Max = 1,
    Rounding = 2,
    Callback = function(value)
        getgenv().Aimbot.FOVSettings.Transparency = value
    end
})

Tabs.Visuals:AddSlider("CameraFOV", {
    Title = "Camera FOV",
    Default = 70,
    Min = 60,
    Max = 120,
    Rounding = 0,
    Callback = function(value)
        game:GetService("Workspace").CurrentCamera.FieldOfView = value
    end
})

-- Player Tab - Added new movement features
Tabs.Player:AddToggle("SpeedHackToggle", {
    Title = "Enable Speed Hack",
    Default = false,
    Callback = function(state)
        getgenv().Movement.SpeedEnabled = state
        if state then
            Fluent:Notify({
                Title = "Speed Hack Enabled",
                Content = "Your character will now move faster!",
                Duration = 2,
            })
        else
            -- Reset player's walkspeed when disabled
            if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") then
                game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 16 -- Default walkspeed
            end
        end
    end
})

Tabs.Player:AddSlider("SpeedMultiplier", {
    Title = "Speed Multiplier",
    Default = 2,
    Min = 1,
    Max = 10,
    Rounding = 1,
    Callback = function(value)
        getgenv().Movement.SpeedMultiplier = value
    end
})

Tabs.Player:AddButton({
    Title = "Reset Character",
    Callback = function()
        if game.Players.LocalPlayer.Character then
            game.Players.LocalPlayer.Character:BreakJoints()
        end
    end
})

-- NEW: Gun Mods Tab
Tabs.GunMods:AddToggle("NoRecoilToggle", {
    Title = "No Recoil",
    Default = false,
    Callback = function(state)
        getgenv().GunMods.NoRecoil = state
        Fluent:Notify({
            Title = "No Recoil",
            Content = state and "No Recoil enabled" or "No Recoil disabled",
            Duration = 2,
        })
    end
})

Tabs.GunMods:AddToggle("NoBulletDelayToggle", {
    Title = "No Bullet Delay",
    Default = false,
    Callback = function(state)
        getgenv().GunMods.NoBulletDelay = state
        Fluent:Notify({
            Title = "No Bullet Delay",
            Content = state and "No Bullet Delay enabled" or "No Bullet Delay disabled",
            Duration = 2,
        })
    end
})

-- ESP Tab
Tabs.ESP:AddToggle("ESPToggle", {
    Title = "Enable ESP",
    Default = false,
    Callback = function(state)
        ESP:Toggle(state)
    end
})

Tabs.ESP:AddToggle("ESPBoxes", {
    Title = "Show Boxes",
    Default = false,
    Callback = function(state)
        ESP.Boxes = state
    end
})

Tabs.ESP:AddToggle("ESPNames", {
    Title = "Show Names",
    Default = false,
    Callback = function(state)
        ESP.Names = state
    end
})

Tabs.ESP:AddToggle("ESPTracers", {
    Title = "Show Tracers",
    Default = false,
    Callback = function(state)
        ESP.Tracers = state
    end
})

Tabs.ESP:AddColorpicker("ESPColor", {
    Title = "ESP Color",
    Default = Color3.fromRGB(255, 0, 0),
    Callback = function(value)
        ESP.Color = value
    end
})

-- Misc Tab
Tabs.Misc:AddButton({
    Title = "Rejoin Game",
    Callback = function()
        game:GetService("TeleportService"):Teleport(game.PlaceId, game.Players.LocalPlayer)
    end
})

Tabs.Misc:AddButton({
    Title = "Copy Discord",
    Callback = function()
        setclipboard("https://discord.gg/evadescript")
        Fluent:Notify({
            Title = "Discord Link Copied",
            Content = "Discord link has been copied to clipboard!",
            Duration = 3,
        })
    end
})

-- UI Customization Tab
Tabs.UI:AddColorpicker("BackgroundColor", {
    Title = "Background Color",
    Default = Color3.fromRGB(15, 15, 15),
    Callback = function(value)
        Fluent:SetThemeColor("Background", value)
    end
})

Tabs.UI:AddColorpicker("AccentColor", {
    Title = "Accent Color",
    Default = Color3.fromRGB(255, 0, 0),
    Callback = function(value)
        Fluent:SetThemeColor("Accent", value)
    end
})

-- Setup required services
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()
local Camera = workspace.CurrentCamera
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Stats = game:GetService("Stats")

-- Create Silent Aim FOV circle
local SilentAimCircle = Drawing.new("Circle")
SilentAimCircle.Visible = getgenv().SilentAim.ShowFOV and getgenv().SilentAim.Enabled
SilentAimCircle.Radius = getgenv().SilentAim.FOV
SilentAimCircle.Color = getgenv().SilentAim.FOVColor
SilentAimCircle.Thickness = 1
SilentAimCircle.Filled = false
SilentAimCircle.Transparency = 1

-- Update FOV circle position on each frame
RunService.RenderStepped:Connect(function()
    -- Update Silent Aim FOV Circle
    if SilentAimCircle then
        SilentAimCircle.Position = Vector2.new(Mouse.X, Mouse.Y + 36)
        SilentAimCircle.Radius = getgenv().SilentAim.FOV
        SilentAimCircle.Visible = getgenv().SilentAim.ShowFOV and getgenv().SilentAim.Enabled
        SilentAimCircle.Color = getgenv().SilentAim.FOVColor
    end
    
    -- Handle Speed Hack
    if getgenv().Movement.SpeedEnabled and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
        LocalPlayer.Character.Humanoid.WalkSpeed = 16 * getgenv().Movement.SpeedMultiplier
    end
end)

-- Improved GetClosestPlayerToMouseSilent function - Fixed to hit more shots
local function GetClosestPlayerToMouseSilent()
    local Target = nil
    local MaxDistance = getgenv().SilentAim.FOV * 1.2 -- Increased range slightly
    
    -- Check hit chance - Now 100% by default
    if math.random(1, 100) > getgenv().SilentAim.HitChance then
        return nil
    end
    
    for _, Player in pairs(Players:GetPlayers()) do
        if Player ~= LocalPlayer then
            if not getgenv().SilentAim.TeamCheck or Player.Team ~= LocalPlayer.Team then
                local Character = Player.Character
                if Character and Character:FindFirstChild("Humanoid") and Character.Humanoid.Health > 0 then
                    -- Try to get hit part, with better fallbacks
                    local HitPart
                    if getgenv().SilentAim.HitPart == "Random" then
                        local parts = {"Head", "UpperTorso", "HumanoidRootPart", "LowerTorso"}
                        for _, partName in ipairs(parts) do
                            local part = Character:FindFirstChild(partName)
                            if part then
                                HitPart = part
                                break
                            end
                        end
                    else
                        HitPart = Character:FindFirstChild(getgenv().SilentAim.HitPart) 
                               or Character:FindFirstChild("HumanoidRootPart")
                               or Character:FindFirstChild("UpperTorso")
                               or Character:FindFirstChild("Head")
                    end
                    
                    if HitPart then
                        local ScreenPoint = Camera:WorldToScreenPoint(HitPart.Position)
                        local VectorDistance = (Vector2.new(Mouse.X, Mouse.Y) - Vector2.new(ScreenPoint.X, ScreenPoint.Y)).Magnitude
                        
                        -- Check if within FOV
                        if VectorDistance < MaxDistance then
                            -- Wall check implementation (simplified)
                            if getgenv().SilentAim.WallCheck then
                                local ray = Ray.new(Camera.CFrame.Position, (HitPart.Position - Camera.CFrame.Position).Unit * 2000)
                                local hit = workspace:FindPartOnRayWithIgnoreList(ray, {LocalPlayer.Character, Character})
                                if not hit then
                                    MaxDistance = VectorDistance
                                    Target = Player
                                end
                            else
                                MaxDistance = VectorDistance
                                Target = Player
                            end
                        end
                    end
                end
            end
        end
    end
    
    return Target
end

-- UPDATED: TriggerBot implementation with enhanced features
local TriggerBotRunning = false
local TriggerBotCooldown = false
local function TriggerBotCheck()
    if TriggerBotRunning or TriggerBotCooldown or not getgenv().TriggerBot.Enabled then return end
    TriggerBotRunning = true
    
    task.spawn(function()
        -- Apply shoot delay
        task.wait(getgenv().TriggerBot.ShootDelay)
        
        local Target = Mouse.Target
        if Target and Target.Parent then
            -- Try to find a player from the target
            local Character = Target.Parent
            local Player = Players:GetPlayerFromCharacter(Character)
            
            -- Enhanced hitbox detection for players
            if not Player then
                -- Check if part is within the hitbox size of any character
                for _, p in pairs(Players:GetPlayers()) do
                    if p ~= LocalPlayer and p.Character then
                        for _, part in pairs(p.Character:GetChildren()) do
                            if part:IsA("BasePart") then
                                local magnitudeDiff = (part.Position - Target.Position).Magnitude
                                if magnitudeDiff <= (part.Size.Magnitude/2) * getgenv().TriggerBot.HitboxSize then
                                    Player = p
                                    Character = p.Character
                                    break
                                end
                            end
                        end
                        if Player then break end
                    end
                end
            end
            
            -- If it's a player and not yourself
            if Player and Player ~= LocalPlayer then
                if not getgenv().TriggerBot.TeamCheck or Player.Team ~= LocalPlayer.Team then
                    -- Add prediction to target position
                    if Character:FindFirstChild("HumanoidRootPart") and getgenv().TriggerBot.Prediction > 0 then
                        local hrp = Character:FindFirstChild("HumanoidRootPart")
                        local predictedPos = hrp.Position + (hrp.Velocity * getgenv().TriggerBot.Prediction)
                        local screenPos = Camera:WorldToScreenPoint(predictedPos)
                        mousemoveabs(screenPos.X, screenPos.Y)
                    end
                    
                    mouse1press()
                    task.wait(getgenv().TriggerBot.HoldTime)
                    mouse1release()
                end
            end
        end
        
        -- Apply cooldown with the delay
        TriggerBotCooldown = true
        task.wait(getgenv().TriggerBot.Delay)
        TriggerBotCooldown = false
        TriggerBotRunning = false
    end)
end

-- Better Mouse.Move connection for TriggerBot
Mouse.Move:Connect(function()
    if getgenv().TriggerBot.Enabled then
        TriggerBotCheck()
    end
end)

-- Improved Silent Aim Hook with better hit registration
local oldNamecall
oldNamecall = hookmetamethod(game, "__namecall", function(self, ...)
    local args = {...}
    local method = getnamecallmethod()
    
    -- Handle No Recoil
    if getgenv().GunMods.NoRecoil and method == "FireServer" and self.Name == "Recoil" then
        return nil
    end
    
    -- Handle No Bullet Delay
    if getgenv().GunMods.NoBulletDelay and method == "FireServer" and (self.Name == "FireDelay" or self.Name:find("Cooldown")) then
        return nil
    end
    
    -- Handle Fast Reload
    if getgenv().TriggerBot.FastReload and method == "FireServer" and self.Name == "Reload" then
        args[1] = 0.1  -- Set reload time to minimum
    end
    
    if getgenv().SilentAim.Enabled and (method == "FireServer" or method == "InvokeServer" or method == "FindPartOnRayWithIgnoreList") then
        local closestPlayer = GetClosestPlayerToMouseSilent()
        
        if closestPlayer and closestPlayer.Character then
            local hitPart
            if getgenv().SilentAim.HitPart == "Random" then
                local parts = {"Head", "UpperTorso", "HumanoidRootPart", "LowerTorso"}
                for _, partName in ipairs(parts) do
                    local part = closestPlayer.Character:FindFirstChild(partName)
                    if part then
                        hitPart = part
                        break
                    end
                end
            else
                hitPart = closestPlayer.Character:FindFirstChild(getgenv().SilentAim.HitPart) 
                       or closestPlayer.Character:FindFirstChild("HumanoidRootPart")
                       or closestPlayer.Character:FindFirstChild("UpperTorso")
                       or closestPlayer.Character:FindFirstChild("Head")
            end
            
            if hitPart then
                -- Apply prediction
                local predictionValue = getgenv().SilentAim.UsePrediction and getgenv().SilentAim.Prediction or 0
                
                -- Better ray handling
                if method == "FindPartOnRayWithIgnoreList" then
                    local origin = Camera.CFrame.Position
                    local direction = (hitPart.Position + (hitPart.Velocity * predictionValue) - origin).Unit * 2000
                    
                    -- Return modified ray with proper ignore list
                    if typeof(args[2]) == "table" then
                        table.insert(args[2], workspace.CurrentCamera)
                    end
                    
                    return oldNamecall(self, Ray.new(origin, direction), args[2])
                end
                
                -- For other remotes, better handling of args
                for i, v in pairs(args) do
                    if typeof(v) == "Vector3" then
                        -- Position vectors
                        args[i] = hitPart.Position + (hitPart.Velocity * predictionValue)
                    elseif typeof(v) == "CFrame" then
                        -- CFrames for aiming
                        args[i] = CFrame.new(v.Position, hitPart.Position + (hitPart.Velocity * predictionValue))
                    elseif typeof(v) == "Ray" then
                        -- Direct ray modifications
                        args[i] = Ray.new(v.Origin, (hitPart.Position + (hitPart.Velocity * predictionValue) - v.Origin).Unit * 2000)
