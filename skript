-- Load required libraries
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local AimbotScript = loadstring(game:HttpGet("https://raw.githubusercontent.com/Exunys/Aimbot-V2/main/Resources/Scripts/Raw%20Main.lua"))()

-- ESP Fix: Load the ESP library correctly
local ESP = loadstring(game:HttpGet("https://kiriot22.com/releases/ESP.lua"))()
ESP:Toggle(false)
ESP.Boxes = false
ESP.Names = false
ESP.Tracers = false
ESP.TeamColor = false
ESP.Color = Color3.fromRGB(255, 0, 0)  -- Set default ESP color to red

-- Initialize Window with pure black and red theme
local Window = Fluent:CreateWindow({
    Title = "Evade" .. Fluent.Version,
    SubTitle = "Enhanced UI Experience",
    TabWidth = 170,
    Size = UDim2.fromOffset(650, 520),
    Acrylic = false, -- Explicitly set to false to prevent transparency
    Theme = "Dark", -- Using dark theme as base
    MinimizeKey = Enum.KeyCode.J,
    TextSize = 18,
})

-- Force black and red theme with zero transparency
Fluent:SetTheme({
    Background = Color3.fromRGB(0, 0, 0), -- Pure black background
    Accent = Color3.fromRGB(255, 0, 0), -- Bright red accent
    LightContrast = Color3.fromRGB(10, 10, 10), -- Very dark contrast
    DarkContrast = Color3.fromRGB(5, 5, 5), -- Almost black contrast  
    TextColor = Color3.fromRGB(255, 255, 255), -- Pure white text
    InlineColor = Color3.fromRGB(50, 0, 0), -- Deep red inline color
})

-- Define Silent Aim Settings - Completely reworked for better accuracy
getgenv().SilentAim = {
    Enabled = false,
    FOV = 100,
    ShowFOV = true,
    FOVColor = Color3.fromRGB(255, 0, 0),
    HitPart = "Head",
    TeamCheck = false,
    WallCheck = false,
    Prediction = 0.1357, -- Default prediction value
    HitChance = 100, -- 100% hit chance for reliability
    PredictionMode = "Auto" -- Auto, Manual, or Ping-Based
}

-- Define Trigger Bot Settings - Fixed implementation
getgenv().TriggerBot = {
    Enabled = false,
    Delay = 0.05, -- Reduced delay for better response
    TeamCheck = false,
    HoldTime = 0.1, -- Hold time for mouse button
    MaxDistance = 1000, -- Maximum distance to check for targets
    CheckInterval = 0.01 -- How often to check for targets
}

-- Define Movement Settings
getgenv().Movement = {
    SpeedEnabled = false,
    SpeedMultiplier = 2 -- Default speed multiplier
}

-- Ping-based prediction values
getgenv().PingPrediction = {
    [20] = 0.097285846595,
    [30] = 0.10698238794,
    [40] = 0.116678929285,
    [50] = 0.12637547063,
    [60] = 0.136071012975,
    [70] = 0.14576755432,
    [80] = 0.155464095665,
    [90] = 0.16516063701,
    [100] = 0.174857178355,
    [110] = 0.1845537197,
    [120] = 0.194250261045,
    [130] = 0.20394680239,
    [140] = 0.213643343735,
    [150] = 0.22333988508,
    [160] = 0.233036426425,
    [170] = 0.24273296777,
    [180] = 0.252429509115,
    [190] = 0.26212605046,
    [200] = 0.271822591805,
    [210] = 0.28151913315,
    [220] = 0.291215674495,
    [230] = 0.30091221584,
    [240] = 0.310608757185,
    [250] = 0.32030529853,
    [260] = 0.330001839875,
    [270] = 0.33969838122,
    [280] = 0.349394922565,
    [290] = 0.35909146391,
    [300] = 0.368788005255
}

-- Recommended prediction values by ping
getgenv().RecommendedPrediction = {
    [20] = 0.10036,
    [30] = 0.1130,
    [40] = 0.13544,
    [50] = 0.1357,
    [60] = 0.13598,
    [70] = 0.13892,
    [80] = 0.1403,
    [90] = 0.1446,
    [100] = 0.1475,
    [110] = 0.1512,
    [120] = 0.1532,
    [130] = 0.1612,
    [140] = 0.1684,
    [150] = 0.1720,
    [160] = 0.1788,
    [170] = 0.1818,
    [180] = 0.1902,
    [190] = 0.2129,
    [200] = 0.2354
}

-- Initialize Aimbot Settings for compatibility with low-end executors
if not getgenv().Aimbot then
    getgenv().Aimbot = {
        Settings = {
            Enabled = false,
            TeamCheck = false,
            WallCheck = false,
            Sensitivity = 0.5,
            TargetPart = "Head",
            VisibleCheck = false
        },
        FOVSettings = {
            Enabled = false,
            Amount = 100,
            Color = Color3.fromRGB(255, 0, 0),
            Filled = false,
            Transparency = 0.5
        }
    }
end

-- Define Tabs
local Tabs = {
    Info = Window:AddTab({ Title = "Info", Icon = "info" }),
    Aim = Window:AddTab({ Title = "Aim", Icon = "crosshair" }),
    SilentAim = Window:AddTab({ Title = "Silent Aim", Icon = "target" }),
    TriggerBot = Window:AddTab({ Title = "TriggerBot", Icon = "zap" }),
    Visuals = Window:AddTab({ Title = "Visuals", Icon = "eye" }),
    ESP = Window:AddTab({ Title = "ESP", Icon = "search" }),
    Player = Window:AddTab({ Title = "Player", Icon = "user" }),
    Misc = Window:AddTab({ Title = "Misc", Icon = "settings" }),
    UI = Window:AddTab({ Title = "UI", Icon = "paintbrush" })
}

-- Add Information to Info Tab
Tabs.Info:AddParagraph({
    Title = "Evade Script",
    Content = "Press 'J' to toggle the menu. Optimized for low-end executors with improved silent aim and fixed features.",
})

-- Notify when the script is loaded
Fluent:Notify({
    Title = "Evade Script Loaded",
    Content = "Enhanced script with fixed silent aim, TriggerBot and ESP!",
    Duration = 5,
})

-- Aim Tab Settings
Tabs.Aim:AddToggle("AimbotToggle", {
    Title = "Enable Aimbot",
    Default = false,
    Callback = function(state)
        getgenv().Aimbot.Settings.Enabled = state
    end
})

Tabs.Aim:AddDropdown("AimbotPart", {
    Title = "Target Part",
    Values = {"Head", "Torso", "Left Arm", "Right Arm", "Left Leg", "Right Leg"},
    Multi = false,
    Default = "Head",
    Callback = function(value)
        getgenv().Aimbot.Settings.TargetPart = value
    end
})

Tabs.Aim:AddSlider("AimbotFOV", {
    Title = "FOV Size",
    Default = 100,
    Min = 50,
    Max = 500,
    Rounding = 0,
    Callback = function(value)
        getgenv().Aimbot.FOVSettings.Amount = value
    end
})

Tabs.Aim:AddSlider("AimbotSmoothing", {
    Title = "Smoothing",
    Default = 0.5,
    Min = 0,
    Max = 1,
    Rounding = 2,
    Callback = function(value)
        getgenv().Aimbot.Settings.Sensitivity = value
    end
})

Tabs.Aim:AddToggle("WallCheck", {
    Title = "Wall Check",
    Default = false,
    Callback = function(state)
        getgenv().Aimbot.Settings.WallCheck = state
    end
})

-- Silent Aim Tab - Completely reworked for better accuracy
Tabs.SilentAim:AddToggle("SilentAimToggle", {
    Title = "Enable Silent Aim",
    Default = false,
    Callback = function(state)
        getgenv().SilentAim.Enabled = state
        if SilentAimCircle then
            SilentAimCircle.Visible = state and getgenv().SilentAim.ShowFOV
        end
    end
})

Tabs.SilentAim:AddDropdown("SilentAimPart", {
    Title = "Target Part",
    Values = {"Head", "HumanoidRootPart", "UpperTorso", "LowerTorso", "Random"},
    Multi = false,
    Default = "Head",
    Callback = function(value)
        getgenv().SilentAim.HitPart = value
    end
})

Tabs.SilentAim:AddSlider("SilentAimFOV", {
    Title = "FOV Size",
    Default = 100,
    Min = 50,
    Max = 500,
    Rounding = 0,
    Callback = function(value)
        getgenv().SilentAim.FOV = value
        if SilentAimCircle then
            SilentAimCircle.Radius = value
        end
    end
})

Tabs.SilentAim:AddToggle("SilentAimFOVVisible", {
    Title = "Show FOV Circle",
    Default = true,
    Callback = function(state)
        getgenv().SilentAim.ShowFOV = state
        if SilentAimCircle then
            SilentAimCircle.Visible = state and getgenv().SilentAim.Enabled
        end
    end
})

-- Added button to toggle FOV visibility with fix
Tabs.SilentAim:AddButton({
    Title = "Toggle FOV Visibility",
    Callback = function()
        getgenv().SilentAim.ShowFOV = not getgenv().SilentAim.ShowFOV
        if SilentAimCircle then
            SilentAimCircle.Visible = getgenv().SilentAim.ShowFOV and getgenv().SilentAim.Enabled
        end
        Fluent:Notify({
            Title = "FOV Visibility",
            Content = getgenv().SilentAim.ShowFOV and "FOV Circle is now visible" or "FOV Circle is now hidden",
            Duration = 2,
        })
    end
})

Tabs.SilentAim:AddColorpicker("SilentAimFOVColor", {
    Title = "FOV Color",
    Default = Color3.fromRGB(255, 0, 0),
    Callback = function(value)
        getgenv().SilentAim.FOVColor = value
        if SilentAimCircle then
            SilentAimCircle.Color = value
        end
    end
})

Tabs.SilentAim:AddToggle("SilentAimWallCheck", {
    Title = "Wall Check",
    Default = false,
    Callback = function(state)
        getgenv().SilentAim.WallCheck = state
    end
})

-- Add hit chance slider for silent aim
Tabs.SilentAim:AddSlider("SilentAimHitChance", {
    Title = "Hit Chance (%)",
    Default = 100,
    Min = 0,
    Max = 100,
    Rounding = 0,
    Callback = function(value)
        getgenv().SilentAim.HitChance = value
    end
})

-- Added prediction mode dropdown
Tabs.SilentAim:AddDropdown("PredictionMode", {
    Title = "Prediction Mode",
    Values = {"Manual", "Recommended", "Ping-Based"},
    Multi = false,
    Default = "Manual",
    Callback = function(value)
        getgenv().SilentAim.PredictionMode = value
        
        -- Auto-set prediction based on selected mode
        if value == "Recommended" or value == "Ping-Based" then
            local ping = math.floor(game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValue())
            local predictionValue
            
            if value == "Recommended" then
                -- Find the closest prediction value for current ping in recommended table
                local closestPing = 200 -- Default to highest value
                for p, _ in pairs(getgenv().RecommendedPrediction) do
                    if math.abs(ping - p) < math.abs(ping - closestPing) then
                        closestPing = p
                    end
                end
                predictionValue = getgenv().RecommendedPrediction[closestPing] or 0.1357
            else -- Ping-Based
                -- Find the closest prediction value for current ping in ping-based table
                local closestPing = 300 -- Default to highest value
                for p, _ in pairs(getgenv().PingPrediction) do
                    if math.abs(ping - p) < math.abs(ping - closestPing) then
                        closestPing = p
                    end
                end
                predictionValue = getgenv().PingPrediction[closestPing] or 0.1357
            end
            
            getgenv().SilentAim.Prediction = predictionValue
            Fluent:Notify({
                Title = "Prediction Updated",
                Content = "Set to " .. predictionValue .. " based on ping: " .. ping .. "ms",
                Duration = 2,
            })
        end
    end
})

Tabs.SilentAim:AddSlider("SilentAimPrediction", {
    Title = "Prediction Value",
    Default = 0.1357,
    Min = 0,
    Max = 0.5,
    Rounding = 5,
    Callback = function(value)
        getgenv().SilentAim.Prediction = value
    end
})

-- Button to update prediction based on ping
Tabs.SilentAim:AddButton({
    Title = "Update Prediction By Ping",
    Callback = function()
        local ping = math.floor(game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValue())
        local predictionValue
        
        if getgenv().SilentAim.PredictionMode == "Recommended" then
            -- Find the closest prediction value for current ping
            local closestPing = 200 -- Default to highest value
            for p, _ in pairs(getgenv().RecommendedPrediction) do
                if math.abs(ping - p) < math.abs(ping - closestPing) then
                    closestPing = p
                end
            end
            predictionValue = getgenv().RecommendedPrediction[closestPing] or 0.1357
        else -- Ping-Based or fallback
            -- Find the closest prediction value for current ping
            local closestPing = 300 -- Default to highest value
            for p, _ in pairs(getgenv().PingPrediction) do
                if math.abs(ping - p) < math.abs(ping - closestPing) then
                    closestPing = p
                end
            end
            predictionValue = getgenv().PingPrediction[closestPing] or 0.1357
        end
        
        getgenv().SilentAim.Prediction = predictionValue
        Fluent:Notify({
            Title = "Prediction Updated",
            Content = "Set to " .. predictionValue .. " based on ping: " .. ping .. "ms",
            Duration = 2,
        })
    end
})

-- TriggerBot Tab - Completely rewritten for reliability
Tabs.TriggerBot:AddToggle("TriggerBotToggle", {
    Title = "Enable Trigger Bot",
    Default = false,
    Callback = function(state)
        getgenv().TriggerBot.Enabled = state
    end
})

Tabs.TriggerBot:AddSlider("TriggerBotDelay", {
    Title = "Delay (seconds)",
    Default = 0.05,
    Min = 0,
    Max = 0.5,
    Rounding = 3,
    Callback = function(value)
        getgenv().TriggerBot.Delay = value
    end
})

Tabs.TriggerBot:AddSlider("TriggerBotHoldTime", {
    Title = "Hold Time (seconds)",
    Default = 0.1,
    Min = 0.01,
    Max = 0.5,
    Rounding = 3,
    Callback = function(value)
        getgenv().TriggerBot.HoldTime = value
    end
})

Tabs.TriggerBot:AddSlider("TriggerBotCheckInterval", {
    Title = "Check Interval",
    Default = 0.01,
    Min = 0.001,
    Max = 0.1,
    Rounding = 3,
    Callback = function(value)
        getgenv().TriggerBot.CheckInterval = value
    end
})

Tabs.TriggerBot:AddToggle("TriggerBotTeamCheck", {
    Title = "Team Check",
    Default = false,
    Callback = function(state)
        getgenv().TriggerBot.TeamCheck = state
    end
})

-- Visuals Tab
Tabs.Visuals:AddColorpicker("FOVColor", {
    Title = "FOV Color",
    Default = Color3.fromRGB(255, 0, 0),
    Callback = function(value)
        getgenv().Aimbot.FOVSettings.Color = value
    end
})

Tabs.Visuals:AddToggle("FOVFilled", {
    Title = "FOV Filled",
    Default = false,
    Callback = function(state)
        getgenv().Aimbot.FOVSettings.Filled = state
    end
})

Tabs.Visuals:AddSlider("FOVTransparency", {
    Title = "FOV Transparency",
    Default = 0.5,
    Min = 0,
    Max = 1,
    Rounding = 2,
    Callback = function(value)
        getgenv().Aimbot.FOVSettings.Transparency = value
    end
})

Tabs.Visuals:AddSlider("CameraFOV", {
    Title = "Camera FOV",
    Default = 70,
    Min = 60,
    Max = 120,
    Rounding = 0,
    Callback = function(value)
        game:GetService("Workspace").CurrentCamera.FieldOfView = value
    end
})

-- Player Tab - Added new movement features
Tabs.Player:AddToggle("SpeedHackToggle", {
    Title = "Enable Speed Hack",
    Default = false,
    Callback = function(state)
        getgenv().Movement.SpeedEnabled = state
        if state then
            Fluent:Notify({
                Title = "Speed Hack Enabled",
                Content = "Your character will now move faster!",
                Duration = 2,
            })
        else
            -- Reset player's walkspeed when disabled
            if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") then
                game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 16 -- Default walkspeed
            end
        end
    end
})

Tabs.Player:AddSlider("SpeedMultiplier", {
    Title = "Speed Multiplier",
    Default = 2,
    Min = 1,
    Max = 10,
    Rounding = 1,
    Callback = function(value)
        getgenv().Movement.SpeedMultiplier = value
    end
})

Tabs.Player:AddButton({
    Title = "Reset Character",
    Callback = function()
        if game.Players.LocalPlayer.Character then
            game.Players.LocalPlayer.Character:BreakJoints()
        end
    end
})

-- ESP Tab with fixes
Tabs.ESP:AddToggle("ESPToggle", {
    Title = "Enable ESP",
    Default = false,
    Callback = function(state)
        ESP:Toggle(state)
        -- Force update ESP options to ensure it works
        if state then
            task.delay(0.1, function()
                ESP.Boxes = getgenv().ESP_Boxes or false
                ESP.Names = getgenv().ESP_Names or false
                ESP.Tracers = getgenv().ESP_Tracers or false
                ESP.TeamColor = false
                ESP.Color = getgenv().ESP_Color or Color3.fromRGB(255, 0, 0)
            end)
        end
    end
})

Tabs.ESP:AddToggle("ESPBoxes", {
    Title = "Show Boxes",
    Default = false,
    Callback = function(state)
        getgenv().ESP_Boxes = state
        ESP.Boxes = state
    end
})

Tabs.ESP:AddToggle("ESPNames", {
    Title = "Show Names",
    Default = false,
    Callback = function(state)
        getgenv().ESP_Names = state
        ESP.Names = state
    end
})

Tabs.ESP:AddToggle("ESPTracers", {
    Title = "Show Tracers",
    Default = false,
    Callback = function(state)
        getgenv().ESP_Tracers = state
        ESP.Tracers = state
    end
})

Tabs.ESP:AddColorpicker("ESPColor", {
    Title = "ESP Color",
    Default = Color3.fromRGB(255, 0, 0),
    Callback = function(value)
        getgenv().ESP_Color = value
        ESP.Color = value
    end
})

-- Button to force refresh ESP
Tabs.ESP:AddButton({
    Title = "Force Refresh ESP",
    Callback = function()
        if ESP then
            ESP:Toggle(false)
            task.wait(0.1)
            ESP:Toggle(true)
            ESP.Boxes = getgenv().ESP_Boxes or false
            ESP.Names = getgenv().ESP_Names or false
            ESP.Tracers = getgenv().ESP_Tracers or false
            ESP.Color = getgenv().ESP_Color or Color3.fromRGB(255, 0, 0)
            Fluent:Notify({
                Title = "ESP Refreshed",
                Content = "ESP has been forcefully refreshed",
                Duration = 2,
            })
        end
    end
})

-- Misc Tab
Tabs.Misc:AddButton({
    Title = "Rejoin Game",
    Callback = function()
        game:GetService("TeleportService"):Teleport(game.PlaceId, game.Players.LocalPlayer)
    end
})

Tabs.Misc:AddButton({
    Title = "Copy Discord",
    Callback = function()
        setclipboard("https://discord.gg/evadescript")
        Fluent:Notify({
            Title = "Discord Link Copied",
            Content = "Discord link has been copied to clipboard!",
            Duration = 3,
        })
    end
})

-- UI Customization Tab - Fixed to ensure no transparency
Tabs.UI:AddColorpicker("BackgroundColor", {
    Title = "Background Color",
    Default = Color3.fromRGB(0, 0, 0),
    Callback = function(value)
        Fluent:SetThemeColor("Background", value)
    end
})

Tabs.UI:AddColorpicker("AccentColor", {
    Title = "Accent Color",
    Default = Color3.fromRGB(255, 0, 0),
    Callback = function(value)
        Fluent:SetThemeColor("Accent", value)
    end
})

-- Button to reset to pure black and red theme
Tabs.UI:AddButton({
    Title = "Reset to Black/Red Theme",
    Callback = function()
        Fluent:SetTheme({
            Background = Color3.fromRGB(0, 0, 0), -- Pure black background
            Accent = Color3.fromRGB(255, 0, 0), -- Bright red accent
            LightContrast = Color3.fromRGB(10, 10, 10), -- Very dark contrast
            DarkContrast = Color3.fromRGB(5, 5, 5), -- Almost black contrast  
            TextColor = Color3.fromRGB(255, 255, 255), -- Pure white text
            InlineColor = Color3.fromRGB(50, 0, 0), -- Deep red inline color
        })
        Fluent:Notify({
            Title = "Theme Reset",
            Content = "UI theme has been reset to pure black and red",
            Duration = 2,
        })
    end
})

-- Get game services
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()
local Camera = workspace.CurrentCamera
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

-- Create Silent Aim FOV circle with fix for visibility
if Drawing then
    SilentAimCircle = Drawing.new("Circle")
    SilentAimCircle.Visible = getgenv().SilentAim.ShowFOV and getgenv().SilentAim.Enabled
    SilentAimCircle.Radius = getgenv().SilentAim.FOV
    SilentAimCircle.Color = getgenv().SilentAim.FOVColor
    SilentAimCircle.Thickness = 1.5
    SilentAimCircle.Filled = false
    SilentAimCircle.Transparency = 1
end

-- Function to print debug information - helpful for low-end executors
local function printDebug(message)
    if getgenv().DebugMode then
        print("[DEBUG] " .. message)
    end
end

-- Update FOV circle position on each frame
RunService.RenderStepped:Connect(function()
    -- Update Silent Aim FOV Circle
    if SilentAimCircle then
        SilentAimCircle.Position = Vector2.new(Mouse.X, Mouse.Y + 36)
        SilentAimCircle.Radius = getgenv().SilentAim.FOV
        SilentAimCircle.Visible = getgenv().SilentAim.ShowFOV and getgenv().SilentAim.Enabled
        SilentAimCircle.Color = getgenv().SilentAim.FOVColor
    end
    
    -- Handle Speed Hack
    if getgenv().Movement.SpeedEnabled and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
        LocalPlayer.Character.Humanoid.WalkSpeed = 16 * getgenv().Movement.SpeedMultiplier
    end
    
    -- Auto-update prediction if using ping-based modes
    if getgenv().SilentAim.PredictionMode ~= "Manual" and getgenv().SilentAim.Enabled then
        local currentFrame = tick()
        -- Only update every 3 seconds to avoid performance impact
        if not getgenv().LastPredictionUpdate or currentFrame - getgenv().LastPredictionUpdate > 3 then
            local ping = math.floor(game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValue())
            local predictionTable = getgenv().SilentAim.PredictionMode == "Recommended" 
                and getgenv().RecommendedPrediction 
                or getgenv().PingPrediction
            
            -- Find the closest ping value
            local closestPing = getgenv().SilentAim.PredictionMode == "Recommended" and 200 or 300
            for p, _ in pairs(predictionTable) do
                if math.abs(ping - p) < math.abs(ping - closestPing) then
                    closestPing = p
                end
            end
            
            -- Update prediction value
            getgenv().SilentAim.Prediction = predictionTable[closestPing] or 0.1357
            getgenv().LastPredictionUpdate = currentFrame
        end
    end
})

-- Get closest player function for silent aim (completely rewritten for accuracy)
local function GetClosestPlayerToMouseSilent()
    local Target = nil
    local MaxDistance = getgenv().SilentAim.FOV
    local MousePos = Vector2.new(Mouse.X, Mouse.Y)
    
    -- Ensure we're not wasting cycles if not enabled
    if not getgenv().SilentAim.Enabled then return nil end
    
    -- Check hit chance
    if math.random(0, 100) > getgenv().SilentAim.HitChance then
        return nil
    end
    
    for _, Player in pairs(Players:GetPlayers()) do
        if Player ~= LocalPlayer then
            if not getgenv().SilentAim.TeamCheck or Player.Team ~= LocalPlayer.Team then
                local Character = Player.Character
                if Character and Character:FindFirstChild("Humanoid") and Character.Humanoid.Health > 0 then
                    local HitPart
                    
                    -- Handle random target part selection
                    if getgenv().SilentAim.HitPart == "Random" then
                        local validParts = {}
                        for _, partName in pairs({"Head", "HumanoidRootPart", "UpperTorso", "LowerTorso"}) do
                            if Character:FindFirstChild(partName) then
                                table.insert(validParts, Character[partName])
                            end
                        end
                        if #validParts > 0 then
                            HitPart = validParts[math.random(1, #validParts)]
                        end
                    else
                        -- Use specified part or fall back to HumanoidRootPart
                        HitPart = Character:FindFirstChild(getgenv().SilentAim.HitPart) or Character:FindFirstChild("HumanoidRootPart")
                    end
                    
                    if HitPart then
                        local ScreenPoint = Camera:WorldToScreenPoint(HitPart.Position)
                        local ScreenPos = Vector2.new(ScreenPoint
