-- Load required libraries
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local AimbotScript = loadstring(game:HttpGet("https://raw.githubusercontent.com/Exunys/Aimbot-V2/main/Resources/Scripts/Raw%20Main.lua"))()

-- ESP Fix: Load the ESP library
local ESP = loadstring(game:HttpGet("https://kiriot22.com/releases/ESP.lua"))()
ESP:Toggle(false)
ESP.Boxes = false
ESP.Names = false
ESP.Tracers = false
ESP.TeamColor = false

-- Initialize Window with black and red theme
local Window = Fluent:CreateWindow({
    Title = "Evade" .. Fluent.Version,
    SubTitle = "Ultra Performance Edition",
    TabWidth = 170,
    Size = UDim2.fromOffset(650, 520),
    Acrylic = false, -- Explicitly set to false to prevent transparency
    Theme = "Dark", -- Using dark theme as base
    MinimizeKey = Enum.KeyCode.J,
    TextSize = 18,
})

-- Custom black and red theme - Increased contrast for better visibility
Fluent:SetTheme({
    Background = Color3.fromRGB(15, 15, 15), -- Darker background
    Accent = Color3.fromRGB(255, 0, 0), -- Bright red accent
    LightContrast = Color3.fromRGB(30, 30, 30),
    DarkContrast = Color3.fromRGB(10, 10, 10),  
    TextColor = Color3.fromRGB(255, 255, 255),
    InlineColor = Color3.fromRGB(80, 0, 0), -- Deeper red inline color
})

-- Define Silent Aim Settings - IMPROVED FOR BLATANT PERFORMANCE
getgenv().SilentAim = {
    Enabled = false,
    FOV = 500, -- Increased FOV for more blatant targeting
    ShowFOV = true,
    FOVColor = Color3.fromRGB(255, 0, 0),
    HitPart = "Head", -- Default to headshots
    TeamCheck = false,
    WallCheck = false,
    Prediction = 0.5, -- Dramatically increased prediction
    HitChance = 100, -- 100% hit chance for guaranteed hits
    AlwaysHit = true -- New feature - will always hit regardless of conditions
}

-- Define Trigger Bot Settings - FIXED IMPLEMENTATION
getgenv().TriggerBot = {
    Enabled = false,
    Delay = 0.01, -- Faster response time
    TeamCheck = false,
    HoldTime = 0.05, -- Reduced hold time for rapid firing
    DoubleClick = true, -- New feature - double click for more damage
    IgnoreUI = true -- Will trigger even when UI elements are under cursor
}

-- Define Movement Settings - EXPANDED OPTIONS
getgenv().Movement = {
    SpeedEnabled = false,
    SpeedMultiplier = 2, -- Default speed multiplier
    JumpEnabled = false,
    JumpMultiplier = 2, -- Jump height multiplier
    NoClip = false, -- Added NoClip feature
    AvoidFall = false -- Avoid falling from platform
}

-- Define Weapon Settings - NEW FEATURE
getgenv().Weapon = {
    FastReload = false,
    ReloadMultiplier = 3, -- How much faster reloading should be
    NoRecoil = false,
    NoSpread = false,
    InfiniteAmmo = false,
    AutoFire = false -- Convert semi-auto to full auto
}

-- Initialize Aimbot Settings for compatibility with low-end executors
if not getgenv().Aimbot then
    getgenv().Aimbot = {
        Settings = {
            Enabled = false,
            TeamCheck = false,
            WallCheck = false,
            Sensitivity = 0.5,
            TargetPart = "Head",
            VisibleCheck = false
        },
        FOVSettings = {
            Enabled = false,
            Amount = 100,
            Color = Color3.fromRGB(255, 0, 0),
            Filled = false,
            Transparency = 0.5
        }
    }
end

-- Define Tabs
local Tabs = {
    Info = Window:AddTab({ Title = "Info", Icon = "info" }),
    Aim = Window:AddTab({ Title = "Aim", Icon = "crosshair" }),
    SilentAim = Window:AddTab({ Title = "Silent Aim", Icon = "target" }),
    TriggerBot = Window:AddTab({ Title = "TriggerBot", Icon = "zap" }),
    Visuals = Window:AddTab({ Title = "Visuals", Icon = "eye" }),
    ESP = Window:AddTab({ Title = "ESP", Icon = "search" }),
    Player = Window:AddTab({ Title = "Player", Icon = "user" }),
    Weapon = Window:AddTab({ Title = "Weapon", Icon = "crosshair" }), -- New tab for weapon features
    Misc = Window:AddTab({ Title = "Misc", Icon = "settings" }),
    UI = Window:AddTab({ Title = "UI", Icon = "paintbrush" })
}

-- Add Information to Info Tab
Tabs.Info:AddParagraph({
    Title = "Evade Script - Ultra Edition",
    Content = "Press 'J' to toggle the menu. Features blatant silent aim, fixed trigger bot, faster reload, and more basic features!",
})

-- Notify when the script is loaded
Fluent:Notify({
    Title = "Evade Script Loaded",
    Content = "Ultra Edition with blatant aim and new features!",
    Duration = 5,
})

-- Aim Tab Settings
Tabs.Aim:AddToggle("AimbotToggle", {
    Title = "Enable Aimbot",
    Default = false,
    Callback = function(state)
        getgenv().Aimbot.Settings.Enabled = state
    end
})

Tabs.Aim:AddDropdown("AimbotPart", {
    Title = "Target Part",
    Values = {"Head", "Torso", "Left Arm", "Right Arm", "Left Leg", "Right Leg"},
    Multi = false,
    Default = "Head",
    Callback = function(value)
        getgenv().Aimbot.Settings.TargetPart = value
    end
})

Tabs.Aim:AddSlider("AimbotFOV", {
    Title = "FOV Size",
    Default = 500, -- Increased for blatant aim
    Min = 50,
    Max = 1000, -- Increased maximum
    Rounding = 0,
    Callback = function(value)
        getgenv().Aimbot.FOVSettings.Amount = value
    end
})

Tabs.Aim:AddSlider("AimbotSmoothing", {
    Title = "Smoothing",
    Default = 0.1, -- Less smoothing for more blatant aim
    Min = 0,
    Max = 1,
    Rounding = 2,
    Callback = function(value)
        getgenv().Aimbot.Settings.Sensitivity = value
    end
})

Tabs.Aim:AddToggle("WallCheck", {
    Title = "Wall Check",
    Default = false,
    Callback = function(state)
        getgenv().Aimbot.Settings.WallCheck = state
    end
})

-- Silent Aim Tab - Enhanced with more blatant options
Tabs.SilentAim:AddToggle("SilentAimToggle", {
    Title = "Enable Silent Aim",
    Default = false,
    Callback = function(state)
        getgenv().SilentAim.Enabled = state
    end
})

Tabs.SilentAim:AddDropdown("SilentAimPart", {
    Title = "Target Part",
    Values = {"Head", "Torso", "Random"},
    Multi = false,
    Default = "Head",
    Callback = function(value)
        getgenv().SilentAim.HitPart = value
    end
})

Tabs.SilentAim:AddSlider("SilentAimFOV", {
    Title = "FOV Size",
    Default = 500, -- Increased for more blatant targeting
    Min = 50,
    Max = 1000, -- Increased maximum
    Rounding = 0,
    Callback = function(value)
        getgenv().SilentAim.FOV = value
    end
})

-- New toggle for Always Hit feature
Tabs.SilentAim:AddToggle("SilentAimAlwaysHit", {
    Title = "Always Hit Target",
    Default = true,
    Callback = function(state)
        getgenv().SilentAim.AlwaysHit = state
    end
})

Tabs.SilentAim:AddToggle("SilentAimFOVVisible", {
    Title = "Show FOV Circle",
    Default = true,
    Callback = function(state)
        getgenv().SilentAim.ShowFOV = state
        -- Update circle visibility immediately
        if SilentAimCircle then
            SilentAimCircle.Visible = state and getgenv().SilentAim.Enabled
        end
    end
})

Tabs.SilentAim:AddButton({
    Title = "Toggle FOV Visibility",
    Callback = function()
        getgenv().SilentAim.ShowFOV = not getgenv().SilentAim.ShowFOV
        if SilentAimCircle then
            SilentAimCircle.Visible = getgenv().SilentAim.ShowFOV and getgenv().SilentAim.Enabled
        end
        Fluent:Notify({
            Title = "FOV Visibility",
            Content = getgenv().SilentAim.ShowFOV and "FOV Circle is now visible" or "FOV Circle is now hidden",
            Duration = 2,
        })
    end
})

Tabs.SilentAim:AddColorpicker("SilentAimFOVColor", {
    Title = "FOV Color",
    Default = Color3.fromRGB(255, 0, 0),
    Callback = function(value)
        getgenv().SilentAim.FOVColor = value
    end
})

Tabs.SilentAim:AddToggle("SilentAimWallCheck", {
    Title = "Wall Check",
    Default = false,
    Callback = function(state)
        getgenv().SilentAim.WallCheck = state
    end
})

-- Add hit chance slider for silent aim
Tabs.SilentAim:AddSlider("SilentAimHitChance", {
    Title = "Hit Chance (%)",
    Default = 100,
    Min = 0,
    Max = 100,
    Rounding = 0,
    Callback = function(value)
        getgenv().SilentAim.HitChance = value
    end
})

Tabs.SilentAim:AddSlider("SilentAimPrediction", {
    Title = "Prediction Value",
    Default = 0.5, -- Increased for better hit rate
    Min = 0,
    Max = 1, -- Increased maximum
    Rounding = 3,
    Callback = function(value)
        getgenv().SilentAim.Prediction = value
    end
})

-- TriggerBot Tab - FIXED IMPLEMENTATION
Tabs.TriggerBot:AddToggle("TriggerBotToggle", {
    Title = "Enable Trigger Bot",
    Default = false,
    Callback = function(state)
        getgenv().TriggerBot.Enabled = state
    end
})

Tabs.TriggerBot:AddSlider("TriggerBotDelay", {
    Title = "Delay (seconds)",
    Default = 0.01, -- Faster response
    Min = 0,
    Max = 0.5, -- Reduced maximum for faster response
    Rounding = 3,
    Callback = function(value)
        getgenv().TriggerBot.Delay = value
    end
})

Tabs.TriggerBot:AddSlider("TriggerBotHoldTime", {
    Title = "Hold Time (seconds)",
    Default = 0.05, -- Faster clicking
    Min = 0.01,
    Max = 0.2, -- Reduced maximum
    Rounding = 3,
    Callback = function(value)
        getgenv().TriggerBot.HoldTime = value
    end
})

-- New toggle for Double Click feature
Tabs.TriggerBot:AddToggle("TriggerBotDoubleClick", {
    Title = "Double Click (More Damage)",
    Default = true,
    Callback = function(state)
        getgenv().TriggerBot.DoubleClick = state
    end
})

-- New toggle to ignore UI elements
Tabs.TriggerBot:AddToggle("TriggerBotIgnoreUI", {
    Title = "Ignore UI Elements",
    Default = true,
    Callback = function(state)
        getgenv().TriggerBot.IgnoreUI = state
    end
})

Tabs.TriggerBot:AddToggle("TriggerBotTeamCheck", {
    Title = "Team Check",
    Default = false,
    Callback = function(state)
        getgenv().TriggerBot.TeamCheck = state
    end
})

-- Visuals Tab
Tabs.Visuals:AddColorpicker("FOVColor", {
    Title = "FOV Color",
    Default = Color3.fromRGB(255, 0, 0),
    Callback = function(value)
        getgenv().Aimbot.FOVSettings.Color = value
    end
})

Tabs.Visuals:AddToggle("FOVFilled", {
    Title = "FOV Filled",
    Default = false,
    Callback = function(state)
        getgenv().Aimbot.FOVSettings.Filled = state
    end
})

Tabs.Visuals:AddSlider("FOVTransparency", {
    Title = "FOV Transparency",
    Default = 0.5,
    Min = 0,
    Max = 1,
    Rounding = 2,
    Callback = function(value)
        getgenv().Aimbot.FOVSettings.Transparency = value
    end
})

Tabs.Visuals:AddSlider("CameraFOV", {
    Title = "Camera FOV",
    Default = 90, -- Increased default FOV
    Min = 60,
    Max = 120,
    Rounding = 0,
    Callback = function(value)
        game:GetService("Workspace").CurrentCamera.FieldOfView = value
    end
})

-- Player Tab - Enhanced movement features
Tabs.Player:AddToggle("SpeedHackToggle", {
    Title = "Enable Speed Hack",
    Default = false,
    Callback = function(state)
        getgenv().Movement.SpeedEnabled = state
        if state then
            Fluent:Notify({
                Title = "Speed Hack Enabled",
                Content = "Your character will now move faster!",
                Duration = 2,
            })
        else
            -- Reset player's walkspeed when disabled
            if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") then
                game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 16 -- Default walkspeed
            end
        end
    end
})

Tabs.Player:AddSlider("SpeedMultiplier", {
    Title = "Speed Multiplier",
    Default = 2,
    Min = 1,
    Max = 10,
    Rounding = 1,
    Callback = function(value)
        getgenv().Movement.SpeedMultiplier = value
    end
})

-- New jump height feature
Tabs.Player:AddToggle("JumpHackToggle", {
    Title = "Enhanced Jump",
    Default = false,
    Callback = function(state)
        getgenv().Movement.JumpEnabled = state
        if state then
            Fluent:Notify({
                Title = "Jump Hack Enabled",
                Content = "Your character will now jump higher!",
                Duration = 2,
            })
        else
            -- Reset player's jump power when disabled
            if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") then
                game.Players.LocalPlayer.Character.Humanoid.JumpPower = 50 -- Default jump power
            end
        end
    end
})

Tabs.Player:AddSlider("JumpMultiplier", {
    Title = "Jump Multiplier",
    Default = 2,
    Min = 1,
    Max = 5,
    Rounding = 1,
    Callback = function(value)
        getgenv().Movement.JumpMultiplier = value
    end
})

-- NoClip feature
Tabs.Player:AddToggle("NoClipToggle", {
    Title = "NoClip (Walk Through Walls)",
    Default = false,
    Callback = function(state)
        getgenv().Movement.NoClip = state
        if state then
            Fluent:Notify({
                Title = "NoClip Enabled",
                Content = "You can now walk through walls!",
                Duration = 2,
            })
        end
    end
})

-- Anti-fall feature
Tabs.Player:AddToggle("AvoidFallToggle", {
    Title = "Avoid Falling",
    Default = false,
    Callback = function(state)
        getgenv().Movement.AvoidFall = state
        if state then
            Fluent:Notify({
                Title = "Avoid Fall Enabled",
                Content = "You will no longer fall off platforms!",
                Duration = 2,
            })
        end
    end
})

Tabs.Player:AddButton({
    Title = "Reset Character",
    Callback = function()
        if game.Players.LocalPlayer.Character then
            game.Players.LocalPlayer.Character:BreakJoints()
        end
    end
})

-- NEW WEAPON TAB - Fast reload and other weapon features
Tabs.Weapon:AddToggle("FastReloadToggle", {
    Title = "Fast Reload",
    Default = false,
    Callback = function(state)
        getgenv().Weapon.FastReload = state
        if state then
            Fluent:Notify({
                Title = "Fast Reload Enabled",
                Content = "Your weapons will now reload faster!",
                Duration = 2,
            })
        end
    end
})

Tabs.Weapon:AddSlider("ReloadMultiplier", {
    Title = "Reload Speed Multiplier",
    Default = 3,
    Min = 1,
    Max = 10,
    Rounding = 1,
    Callback = function(value)
        getgenv().Weapon.ReloadMultiplier = value
    end
})

Tabs.Weapon:AddToggle("NoRecoilToggle", {
    Title = "No Recoil",
    Default = false,
    Callback = function(state)
        getgenv().Weapon.NoRecoil = state
        if state then
            Fluent:Notify({
                Title = "No Recoil Enabled",
                Content = "Your weapons will have no recoil!",
                Duration = 2,
            })
        end
    end
})

Tabs.Weapon:AddToggle("NoSpreadToggle", {
    Title = "No Spread",
    Default = false,
    Callback = function(state)
        getgenv().Weapon.NoSpread = state
        if state then
            Fluent:Notify({
                Title = "No Spread Enabled",
                Content = "Your weapons will have perfect accuracy!",
                Duration = 2,
            })
        end
    end
})

Tabs.Weapon:AddToggle("InfiniteAmmoToggle", {
    Title = "Infinite Ammo",
    Default = false,
    Callback = function(state)
        getgenv().Weapon.InfiniteAmmo = state
        if state then
            Fluent:Notify({
                Title = "Infinite Ammo Enabled",
                Content = "Your weapons will never run out of ammo!",
                Duration = 2,
            })
        end
    end
})

Tabs.Weapon:AddToggle("AutoFireToggle", {
    Title = "Auto Fire",
    Default = false,
    Callback = function(state)
        getgenv().Weapon.AutoFire = state
        if state then
            Fluent:Notify({
                Title = "Auto Fire Enabled",
                Content = "All weapons will now fire automatically!",
                Duration = 2,
            })
        end
    end
})

-- ESP Tab
Tabs.ESP:AddToggle("ESPToggle", {
    Title = "Enable ESP",
    Default = false,
    Callback = function(state)
        ESP:Toggle(state)
    end
})

Tabs.ESP:AddToggle("ESPBoxes", {
    Title = "Show Boxes",
    Default = false,
    Callback = function(state)
        ESP.Boxes = state
    end
})

Tabs.ESP:AddToggle("ESPNames", {
    Title = "Show Names",
    Default = false,
    Callback = function(state)
        ESP.Names = state
    end
})

Tabs.ESP:AddToggle("ESPTracers", {
    Title = "Show Tracers",
    Default = false,
    Callback = function(state)
        ESP.Tracers = state
    end
})

Tabs.ESP:AddColorpicker("ESPColor", {
    Title = "ESP Color",
    Default = Color3.fromRGB(255, 0, 0),
    Callback = function(value)
        ESP.Color = value
    end
})

-- Misc Tab
Tabs.Misc:AddButton({
    Title = "Rejoin Game",
    Callback = function()
        game:GetService("TeleportService"):Teleport(game.PlaceId, game.Players.LocalPlayer)
    end
})

Tabs.Misc:AddButton({
    Title = "Copy Discord",
    Callback = function()
        setclipboard("https://discord.gg/evadescript")
        Fluent:Notify({
            Title = "Discord Link Copied",
            Content = "Discord link has been copied to clipboard!",
            Duration = 3,
        })
    end
})

-- UI Customization Tab
Tabs.UI:AddColorpicker("BackgroundColor", {
    Title = "Background Color",
    Default = Color3.fromRGB(15, 15, 15),
    Callback = function(value)
        Fluent:SetThemeColor("Background", value)
    end
})

Tabs.UI:AddColorpicker("AccentColor", {
    Title = "Accent Color",
    Default = Color3.fromRGB(255, 0, 0),
    Callback = function(value)
        Fluent:SetThemeColor("Accent", value)
    end
})

-- Silent Aim Implementation with MORE BLATANT PERFORMANCE
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()
local Camera = workspace.CurrentCamera
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

-- Create Silent Aim FOV circle
local SilentAimCircle = Drawing.new("Circle")
SilentAimCircle.Visible = getgenv().SilentAim.ShowFOV and getgenv().SilentAim.Enabled
SilentAimCircle.Radius = getgenv().SilentAim.FOV
SilentAimCircle.Color = getgenv().SilentAim.FOVColor
SilentAimCircle.Thickness = 2 -- Increased thickness
SilentAimCircle.Filled = false
SilentAimCircle.Transparency = 1

-- Update FOV circle position on each frame
RunService.RenderStepped:Connect(function()
    -- Update Silent Aim FOV Circle
    if SilentAimCircle then
        SilentAimCircle.Position = Vector2.new(Mouse.X, Mouse.Y + 36)
        SilentAimCircle.Radius = getgenv().SilentAim.FOV
        SilentAimCircle.Visible = getgenv().SilentAim.ShowFOV and getgenv().SilentAim.Enabled
        SilentAimCircle.Color = getgenv().SilentAim.FOVColor
    end
    
    -- Handle Speed Hack
    if getgenv().Movement.SpeedEnabled and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
        LocalPlayer.Character.Humanoid.WalkSpeed = 16 * getgenv().Movement.SpeedMultiplier
    end
    
    -- Handle Jump Hack
    if getgenv().Movement.JumpEnabled and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
        LocalPlayer.Character.Humanoid.JumpPower = 50 * getgenv().Movement.JumpMultiplier
    end
    
    -- Handle NoClip
    if getgenv().Movement.NoClip and LocalPlayer.Character then
        for _, part in pairs(LocalPlayer.Character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.CanCollide = false
            end
        end
    end
    
    -- Handle Avoid Fall
    if getgenv().Movement.AvoidFall and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
        if LocalPlayer.Character.Humanoid:GetState() == Enum.HumanoidStateType.Freefall then
            local raycast = Ray.new(LocalPlayer.Character.HumanoidRootPart.Position, Vector3.new(0, -10, 0))
            local hitPart, hitPos = workspace:FindPartOnRay(raycast, LocalPlayer.Character)
            
            if not hitPart then
                -- No ground below, create temporary platform
                local tempPlatform = Instance.new("Part", workspace)
                tempPlatform.Size = Vector3.new(5, 0.5, 5)
                tempPlatform.Anchored = true
                tempPlatform.CFrame = CFrame.new(LocalPlayer.Character.HumanoidRootPart.Position - Vector3.new(0, 3, 0))
                tempPlatform.Transparency = 0.8
                tempPlatform.Name = "TempPlatform"
                
                -- Remove platform after 2 seconds
                game:GetService("Debris"):AddItem(tempPlatform, 2)
            end
        end
    end
end)

-- Get closest player function for silent aim (IMPROVED FOR BLATANT AIM)
local function GetClosestPlayerToMouseSilent()
    local Target = nil
    local MaxDistance = getgenv().SilentAim.AlwaysHit and math.huge or getgenv().SilentAim.FOV
    
    -- Check hit chance
    if not getgenv().SilentAim.AlwaysHit and math.random(0, 100) > getgenv().SilentAim.HitChance then
        return nil
    end
    
    for _, Player in pairs(Players:GetPlayers()) do
        if Player ~= LocalPlayer then
            if not getgenv().SilentAim.TeamCheck or Player.Team ~= LocalPlayer.Team then
                local Character = Player.Character
                if Character and Character:FindFirstChild("Humanoid") and Character.Humanoid.Health > 0 and Character:FindFirstChild("HumanoidRootPart") then
                    local HitPart = Character:FindFirstChild(getgenv().SilentAim.HitPart) or Character:FindFirstChild("HumanoidRootPart")
                    if HitPart then
                        local ScreenPoint = Camera:WorldToScreenPoint(HitPart.Position)
                        local VectorDistance = (Vector2.new(Mouse.X, Mouse.Y) - Vector2.new(ScreenPoint.X, ScreenPoint.Y)).Magnitude
                        
                        if VectorDistance < MaxDistance or getgenv().SilentAim.AlwaysHit then
                            if getgenv().SilentAim.WallCheck and not getgenv().SilentAim.AlwaysHit then
                                local ray = Ray.new(Camera.CFrame.Position, (HitPart.Position - Camera.CFrame.Position).Unit * 2000)
                                local hit, hitPosition = workspace:FindPartOnRayWithIgnoreList(ray, {Character, LocalPlayer.Character})
                                if hit and hit:IsDescendantOf(Character) then
                                    MaxDistance = VectorDistance
                                    Target = Player
                                end
                            else
                                MaxDistance = VectorDistance
                                Target = Player
                            end
                        end
                    end
                end
            end
        end
    end
    
    return Target
end

-- FIXED TRIGGERBOT IMPLEMENTATION
local TriggerBotRunning = false
local function TriggerBotCheck()
    if TriggerBotRunning or not getgenv().TriggerBot.Enabled then return end
    TriggerBotRunning = true
    
    local Target = Mouse.Target
    if Target and Target.Parent then
        local Player = Players:GetPlayerFromCharacter(Target.Parent)
        
        -- Check if target is a UI element and ignore if needed
        local isUIElement = false
        if Target:IsA("GuiObject") then
            isUIElement = true
        end
        
        if (Player and Player ~= LocalPlayer and (not getgenv().TriggerBot.TeamCheck or Player.Team ~= LocalPlayer.Team)) or 
           (not Player and getgenv().TriggerBot.IgnoreUI and not isUIElement) then
            task.wait(getgenv().TriggerBot.Delay) -- Using task.wait for better timing precision
            
            -- Double click for more damage if enabled
            if getgenv().TriggerBot.DoubleClick then
                mouse1press()
                task.wait(getgenv().TriggerBot.HoldTime / 2)
                mouse1release()
                task.wait(0.01) -- Small delay between clicks
                mouse1press()
                task.wait(getgenv().TriggerBot.HoldTime / 2)
                mouse1release()
            else
                mouse1press()
                task.wait(getgenv().TriggerBot.HoldTime)
                mouse1release()
            end
        end
    end
    
    task.wait(0.01) -- Small cooldown to prevent excessive CPU usage
    TriggerBotRunning = false
end

-- Hook TriggerBot to Mouse Movement and Clicks
Mouse.Move:Connect(function()
    if getgenv().TriggerBot.Enabled then
        TriggerBotCheck()
    end
end)

-- Additional TriggerBot hook for mouse movement
RunService.Heartbeat:Connect(function()
    if getgenv().TriggerBot.Enabled then
        TriggerBotCheck()
    end
end)

-- Fast Reload Implementation
local function ApplyFastReload()
    local mt = getrawmetatable(game)
    local oldNamecall = mt.__namecall
    
    if setreadonly then setreadonly(mt, false) else make_writeable(mt) end
    
    mt.__namecall = newcclosure(function(self, ...)
        local method = getnamecallmethod()
